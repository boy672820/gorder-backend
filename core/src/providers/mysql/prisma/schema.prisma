generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId         BigInt          @id @unique(map: "userId_UNIQUE") @default(autoincrement()) @db.UnsignedBigInt
  email          String          @unique(map: "email_UNIQUE") @db.VarChar(255)
  createdAt      DateTime        @default(now()) @db.DateTime(0)
  updatedAt      DateTime        @default(now()) @db.DateTime(0)
  authentication Authentication?
  history        History[]
  order          Order[]
}

model History {
  historyId   BigInt      @unique(map: "historyId_UNIQUE") @default(autoincrement()) @db.UnsignedBigInt
  userId      BigInt      @db.UnsignedBigInt
  type        String      @map("historyType") @db.VarChar(20)
  amount      Int         @db.UnsignedInt
  storeName   String      @db.VarChar(45)
  productName String      @db.VarChar(45)
  basePrice   Int         @db.UnsignedInt
  discount    Int         @db.UnsignedTinyInt
  totalPrice  Int         @db.UnsignedInt
  createdAt   DateTime    @default(now()) @db.DateTime(0)
  historyType HistoryType @relation(fields: [type], references: [historyType], onDelete: NoAction, onUpdate: NoAction, map: "fk_History_HistoryType1")
  user        User        @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "fk_User_has_Product_User")

  @@id([historyId, userId, type])
  @@index([type], map: "fk_History_HistoryType1_idx")
  @@index([userId], map: "fk_User_has_Product_User_idx")
}

model HistoryType {
  historyType String    @id @unique(map: "name_UNIQUE") @db.VarChar(20)
  histories   History[]
}

model Order {
  orderId          BigInt            @unique(map: "orderId_UNIQUE") @default(autoincrement()) @db.UnsignedBigInt
  userId           BigInt            @db.UnsignedBigInt
  amount           Int               @db.UnsignedInt
  type             String            @map("orderType") @db.VarChar(20)
  status           String            @map("orderStatus") @db.VarChar(20)
  createdAt        DateTime          @default(now()) @db.DateTime(0)
  orderStatus      OrderStatus       @relation(fields: [status], references: [orderStatus], map: "fk_Order_OrderStatus1")
  orderType        OrderType         @relation(fields: [type], references: [orderType], map: "fk_Order_OrderType1")
  user             User              @relation(fields: [userId], references: [userId], map: "fk_User_has_Product_User1")
  orderHasProducts OrderHasProduct[]

  @@id([orderId, userId, type, status])
  @@index([type], map: "fk_Order_OrderType1_idx")
  @@index([userId], map: "fk_User_has_Product_User1_idx")
  @@index([status], map: "fk_Order_OrderStatus1_idx")
}

model OrderType {
  orderType String  @id @unique(map: "orderType_UNIQUE") @db.VarChar(20)
  Order     Order[]
}

model Product {
  productId        Int               @unique(map: "productId_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  storeId          Int               @db.UnsignedInt
  name             String            @unique(map: "name_UNIQUE") @db.VarChar(45)
  basePrice        Int               @db.UnsignedInt
  discount         Int               @default(0) @db.UnsignedTinyInt
  totalPrice       Int               @db.UnsignedInt
  number           Int               @db.UnsignedTinyInt
  createdAt        DateTime          @default(now()) @db.DateTime(0)
  updatedAt        DateTime          @default(now()) @db.DateTime(0)
  store            Store             @relation(fields: [storeId], references: [storeId], onDelete: Cascade, map: "fk_Product_Store1")
  orderHasProducts OrderHasProduct[]

  @@id([productId, storeId])
  @@index([storeId], map: "fk_Product_Store1_idx")
}

model Store {
  storeId   Int       @id @unique(map: "storeId_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  name      String    @unique(map: "name_UNIQUE") @db.VarChar(45)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  Product   Product[]
}

model OrderStatus {
  orderStatus String  @id @unique(map: "orderStatus_UNIQUE") @db.VarChar(20)
  Order       Order[]
}

model Authentication {
  userId       BigInt  @id @unique(map: "userId_UNIQUE") @db.UnsignedBigInt
  accessToken  String? @db.VarChar(255)
  refreshToken String? @db.VarChar(255)
  User         User    @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "fk_Authentication_User1")
}

model OrderHasProduct {
  orderId   BigInt  @db.UnsignedBigInt
  productId Int     @db.UnsignedInt
  Order     Order   @relation(fields: [orderId], references: [orderId], onDelete: Cascade, map: "fk_Order_has_Product_Order1")
  Product   Product @relation(fields: [productId], references: [productId], onDelete: Cascade, map: "fk_Order_has_Product_Product1")

  @@id([orderId, productId])
  @@index([orderId], map: "fk_Order_has_Product_Order1_idx")
  @@index([productId], map: "fk_Order_has_Product_Product1_idx")
}
